#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property newTargetInputRef ${nuklei:newReferenceId()} # external scope

property nuklei ${nuklei:directory("target/nukleus-itests").streamsCapacity(1024 * 1024, 64 * 1024)}

property sourceInput ${nuklei.streams("http-cache", "source")}
property sourceOutputEst ${nuklei.streams("source", "http-cache#source")}

property newTargetInputId ${nuklei:newStreamId()}
property newSourceOutputEstId ${nuklei:newStreamId()}
property newTargetCorrelationId ${nuklei:newCorrelationId()}

connect await ROUTED_OUTPUT
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(sourceInput.buffer)}
        option writer ${agrona:oneToOneWriter(sourceInput.throttle)}
connected

read [0x00 0x00 0x00 0x01]
read ([0..8]:sourceInputId)
read ([0..8]:sourceInputRef)
read ([0..8]:sourceCorrelationId)
read [0x00] [0x07] ":scheme" [0x04] "http"
read [0x00] [0x07] ":method" [0x03] "GET"
read [0x00] [0x05] ":path" [0x05] "/path"
read [0x00] [0x0a] ":authority" [0x0e] "localhost:8080"

# SPEC: https://www.w3.org/TR/2009/WD-eventsource-20090423/
#   - the Accept header may be included; if included, it must contain only formats of event framing that are supported by the user agent (one of which must be text/event-stream, as described below)
#   -  User agents should use the Cache-Control: no-cache 

read notify HTTP_BEGIN_OUTPUT_EST_RECEIVED

read [0x00 0x00 0x00 0x03]
     ${sourceInputId}

close
closed

connect await ROUTED_OUTPUT
        agrona://stream/bidirectional
        option reader ${agrona:oneToOneReader(sourceOutputEst.throttle)}
        option writer ${agrona:oneToOneWriter(sourceOutputEst.buffer)}
connected

write await HTTP_BEGIN_OUTPUT_EST_RECEIVED

write [0x00 0x00 0x00 0x01]
write ${newSourceOutputEstId}
write [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
write ${sourceCorrelationId}
write [0x00] [0x07] ":status" [0x03] "200"
write [0x00] [0x0c] "content-type" [0x11] "text/event-stream"
write flush

read [0x40 0x00 0x00 0x02]
read ${newSourceOutputEstId}
read [0..4]
